// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  User      User[]
  Pages     Page[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Page {
  id        String   @id @default(cuid())
  name      String
  path      String   @unique
  roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  roleId           String?
  role             Role?              @relation(fields: [roleId], references: [id])
  accounts         Account[]
  sessions         Session[]
  profile          Profile?
  PlanComments     PlanComment[]
  CourseNotes      CourseNote[]
  noteLikes        CourseNote[]       @relation("like")
  UserTrainingPlan UserTrainingPlan[]
  UserCourse       UserCourse[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

}

model Profile {
  id          String   @id @default(cuid())
  name        String?
  position    String?
  phone       String?
  address     String?
  customImage String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

}

enum Platform {
  Platzi
  Udemy
  Udacity
  Edx
  Coursera
  Acamica
  Youtube
}

model Course {
  id            String         @id @default(cuid())
  name          String
  hours         Int
  platform      Platform
  link          String
  TrainingPlans TrainingPlan[]
  CourseNotes   CourseNote[]
  UserCourse    UserCourse[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

}

model TrainingPlan {
  id               String             @id @default(cuid())
  name             String
  description      String
  Courses          Course[]
  PlanComments     PlanComment[]
  UserTrainingPlan UserTrainingPlan[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

}

model PlanComment {
  id             String       @id @default(cuid())
  comment        String
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  trainingPlanId String
  trainingPlan   TrainingPlan @relation(fields: [trainingPlanId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

}

model CourseNote {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  note      String
  likes     User[]   @relation("like")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model UserTrainingPlan {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  trainingPlan   TrainingPlan @relation(fields: [trainingPlanId], references: [id])
  trainingPlanId String
  UserCourse     UserCourse[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, trainingPlanId])
}

model UserCourse {
  id           String             @id @default(cuid())
  courseId     String
  course       Course             @relation(fields: [courseId], references: [id])
  finish       Boolean
  certificate  String?
  userTraining UserTrainingPlan[]
  user         User               @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@unique([userId, courseId])
}
